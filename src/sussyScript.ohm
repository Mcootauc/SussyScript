SussyScript {
  Program   = Statement+
  Statement = let id "=" Exp                       -- vardec
            | function id "(" Params ")" Block     -- fundec
            | id "=" Exp                           -- assign
            | print Exp                            -- print
            | return Exp                           -- return
            | while Exp Block                      -- while
            | space
            // | IfStmt

  Block     = "{" Statement* "}"

  // IfStmt    = if Exp Block (elseif Exp Block)* (else Block)?         -- long
  //           | if Exp Block                                           -- short

  Exp       = ("-" | "!") Exp7                        -- unary
            | Exp1 "?" Exp1 ":" Exp                   -- ternary
            | Exp1
  Exp1      = Exp1 "||" Exp2                          -- binary
            | Exp2
  Exp2      = Exp2 "&&" Exp3                          -- binary
            | Exp3
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4 -- binary
            | Exp4
  Exp4      = Exp4 ("+" | "-") Exp5                   -- binary
            | Exp5
  Exp5      = Exp5 ("*" | "/" | "%") Exp6             -- binary
            | Exp6
  Exp6      = Exp7 "**" Exp6                          -- binary
            | Exp7
  Exp7      = num
            | true
            | false
            | Call
            | id                                      -- id
            | "(" Exp ")"                             -- parens
            | strlit

  strlit    = "\"" (~"\"" any)* "\""

  Call      = id "(" Args ")"
  Params    = ListOf<id, ",">
  Args      = ListOf<Exp, ",">

  Return      = return Exp 		                        -- exp 

  let         = "letus" ~alnum
  print       = "report" ~alnum
  function    = "task" ~alnum
  if          = "sus" ~alnum
  elseif      = "mega sus" ~alnum
  else        = "final sus" ~alnum
  while       = "during" ~alnum
  for         = "scan" ~alnum
  return      = "vote" ~alnum
  true        = "crewmate" ~alnum
  false       = "imposter" ~alnum
  break       = "eject" ~alnum
  class       = "role" ~alnum
  this        = "thus" ~alnum
  construct   = "build" ~alnum
  and         = "and" ~alnum
  or          = "or" ~alnum
  not         = "not" ~alnum
  new         = "new" ~alnum

  keyword     = let | print | function | else | elseif | if | while 
            | for | break | return | true | false | this | new | construct | class      
  num       = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  id        = ~keyword letter idchar*
  idchar    = letter | digit | "_"
  space    += "cR" (~"\n" any)*                       -- comment
}